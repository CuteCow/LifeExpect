# -*- coding: utf-8 -*-
"""
Created on Thu Jul 30 13:20:08 2020

@author: james
"""
import numpy as np
import matplotlib.pyplot as plt
import math
# The probability of death at ages 0 to 100 based on UK Males 2018 edition
qx_eng = [0.004277,0.000257,0.000123,0.000100,0.000111,0.000080,0.000075,0.000080,0.000064,0.000045,0.000084,0.000102,0.000098,0.000111,0.000142,0.000200,0.000226,0.000335,0.000447,0.000433,0.000506,0.000532,0.000495,0.000499,0.000534,0.000514,0.000552,0.000578,0.000636,0.000689,0.000717,0.000856,0.000701,0.000916,0.000933,0.000987,0.001044,0.001244,0.001192,0.001256,0.001472,0.001502,0.001799,0.001984,0.002051,0.002298,0.002423,0.002560,0.002785,0.003058,0.003257,0.003507,0.003851,0.004207,0.004329,0.004732,0.005017,0.005857,0.006406,0.006577,0.007304,0.008186,0.008927,0.010092,0.010566,0.011823,0.013007,0.014059,0.015755,0.017332,0.018487,0.019417,0.021893,0.025607,0.027256,0.030570,0.033948,0.039753,0.042432,0.047153,0.052904,0.059602,0.065064,0.073432,0.083542,0.093664,0.107508,0.119334,0.133716,0.151937,0.162447,0.177082,0.198272,0.215520,0.239894,0.258233,0.289344,0.307275,0.317195,0.369403,0.388060]

# The probability of death at ages 0 to 110 based on Japan Males 2018 edition
qx_japan = [0.00199000,0.00034000,0.00018000,0.00013000,0.00009000,0.00010000,0.00011000,0.00007000,0.00008000,0.00006000,0.00007000,0.00008000,0.00007000,0.00009000,0.00014000,0.00017000,0.00021000,0.00026000,0.00030000,0.00039000,0.00040000,0.00056000,0.00050000,0.00047000,0.00050000,0.00057000,0.00050000,0.00052000,0.00056000,0.00056000,0.00059000,0.00057000,0.00061000,0.00065000,0.00067000,0.00069000,0.00074000,0.00084000,0.00083000,0.00090000,0.00096000,0.00110000,0.00119000,0.00133000,0.00139000,0.00156000,0.00183000,0.00193000,0.00214000,0.00244000,0.00274000,0.00275000,0.00311000,0.00353000,0.00370000,0.00412000,0.00461000,0.00509000,0.00553000,0.00619000,0.00675000,0.00726000,0.00797000,0.00906000,0.00997000,0.01094000,0.01189000,0.01300000,0.01461000,0.01630000,0.01579000,0.01891000,0.02088000,0.02146000,0.02502000,0.02668000,0.02999000,0.03255000,0.03776000,0.04123000,0.04786000,0.05292000,0.06065000,0.06890000,0.07668000,0.08828000,0.09783000,0.11101000,0.12157000,0.13658000,0.15483000,0.16722000,0.18625000,0.20458000,0.22061000,0.24455000,0.26578000,0.28759000,0.30982000,0.33225000,0.35469000,0.37694000,0.39880000,0.42009000,0.44065000,0.46034000,0.47904000,0.49667000,0.51317000,0.52852000]
# NOTE : I removed the qx_japan[110] value which has a value of 1.0 (i.e. certain death at Age 110)

# Change these to select the table of interest
qx = qx_japan
qx_len = len(qx)

# number of coeffients for regression model 
coef = 11

# Create the regression model
x = np.linspace(0, qx_len - 1, qx_len)
y = np.array(qx)
p = np.poly1d(np.polyfit(x, y, coef))

t = np.linspace(0, qx_len - 1, qx_len)
plt.plot(x, y, 'o', t, p(t), '-')
plt.show()

# Plot the error terms
error = np.empty(qx_len)

for i in range(len(qx)):
    error[i] = qx[i] - p(i)

plt.plot(x, error, '.')
plt.show()

smoothed_qx = []
for i in range(110):
    smoothed_qx.append(p(i))

plt.plot(x, y, 'o', t, smoothed_qx, '-')
plt.show()   
    
smoothed_qx = [ '%.8f' % elem for elem in smoothed_qx ]
smoothed_qx = [ math.floor(0.0001) % elem for elem in smoothed_qx ]
