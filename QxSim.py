#import matplotlib.mlab as mlab
import matplotlib.pyplot as plt
import numpy as np
import random
from collections import Counter
from collections import OrderedDict

# The probability of death at ages 0 to 100 based on UK Males 2018 edition
qx_eng = [0.004277,0.000257,0.000123,0.000100,0.000111,0.000080,0.000075,0.000080,0.000064,0.000045,0.000084,0.000102,0.000098,0.000111,0.000142,0.000200,0.000226,0.000335,0.000447,0.000433,0.000506,0.000532,0.000495,0.000499,0.000534,0.000514,0.000552,0.000578,0.000636,0.000689,0.000717,0.000856,0.000701,0.000916,0.000933,0.000987,0.001044,0.001244,0.001192,0.001256,0.001472,0.001502,0.001799,0.001984,0.002051,0.002298,0.002423,0.002560,0.002785,0.003058,0.003257,0.003507,0.003851,0.004207,0.004329,0.004732,0.005017,0.005857,0.006406,0.006577,0.007304,0.008186,0.008927,0.010092,0.010566,0.011823,0.013007,0.014059,0.015755,0.017332,0.018487,0.019417,0.021893,0.025607,0.027256,0.030570,0.033948,0.039753,0.042432,0.047153,0.052904,0.059602,0.065064,0.073432,0.083542,0.093664,0.107508,0.119334,0.133716,0.151937,0.162447,0.177082,0.198272,0.215520,0.239894,0.258233,0.289344,0.307275,0.317195,0.369403,0.388060]

# The probability of death at ages 0 to 110 based on Japan Males 2018 edition
qx_japan = [0.00199000,0.00034000,0.00018000,0.00013000,0.00009000,0.00010000,0.00011000,0.00007000,0.00008000,0.00006000,0.00007000,0.00008000,0.00007000,0.00009000,0.00014000,0.00017000,0.00021000,0.00026000,0.00030000,0.00039000,0.00040000,0.00056000,0.00050000,0.00047000,0.00050000,0.00057000,0.00050000,0.00052000,0.00056000,0.00056000,0.00059000,0.00057000,0.00061000,0.00065000,0.00067000,0.00069000,0.00074000,0.00084000,0.00083000,0.00090000,0.00096000,0.00110000,0.00119000,0.00133000,0.00139000,0.00156000,0.00183000,0.00193000,0.00214000,0.00244000,0.00274000,0.00275000,0.00311000,0.00353000,0.00370000,0.00412000,0.00461000,0.00509000,0.00553000,0.00619000,0.00675000,0.00726000,0.00797000,0.00906000,0.00997000,0.01094000,0.01189000,0.01300000,0.01461000,0.01630000,0.01579000,0.01891000,0.02088000,0.02146000,0.02502000,0.02668000,0.02999000,0.03255000,0.03776000,0.04123000,0.04786000,0.05292000,0.06065000,0.06890000,0.07668000,0.08828000,0.09783000,0.11101000,0.12157000,0.13658000,0.15483000,0.16722000,0.18625000,0.20458000,0.22061000,0.24455000,0.26578000,0.28759000,0.30982000,0.33225000,0.35469000,0.37694000,0.39880000,0.42009000,0.44065000,0.46034000,0.47904000,0.49667000,0.51317000,0.52852000, 1.0]

qx_smooth = [0.0015110798589499787, 0.0009104385953470473, 0.0004721299761988203, 0.00017376895136901951, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 9.258929585478329e-05, 0.00016143385803300304, 0.0002211516622037308, 0.00026885026188296166, 0.00030361570672896997, 0.0003260815038870174, 0.00033800822718641236, 0.00034189148487032855, 0.0003406110630425755, 0.00033712982793428605, 0.0003342473477449593, 0.0003344101380065934, 0.00033957789845793476, 0.00035114305108837913, 0.0003698992666033318, 0.00039605343984645, 0.0004292747049564412, 0.0004687735309918462, 0.0005134036726750315, 0.0005617797345249051, 0.0006124033071956054, 0.000663791021038955, 0.0007145984039677862, 0.0007637341003304347, 0.000810459777889414, 0.0008544718958407003, 0.0008959624042570685, 0.0009356563720957486, 0.0009748254761020607, 0.001015277207237302, 0.0010593205467941953, 0.0011097097147702755, 0.0011695683834754378, 0.0012422974663547789, 0.0013314702237498433, 0.0014407189633367712, 0.0015736180444593793, 0.001733568214949228, 0.001923687510518249, 0.002146714025903434, 0.002404925820631098, 0.0027000830492698268, 0.0030333971062046763, 0.0034055311499243753, 0.003816635824510649, 0.0042664233311129705, 0.004754282225533073, 0.005279434436908712, 0.005841135026754932, 0.006438914146338098, 0.00707285951671802, 0.007743936563215302, 0.008454342097511279, 0.009207886176669986, 0.010010395491438548, 0.0108701303711132, 0.011798206256177904, 0.012809009306409415, 0.013920594706663594, 0.015155055226675748, 0.016538846716855723, 0.01810305650269544, 0.019883600108888178, 0.021921331433028317, 0.024262051423691686, 0.026956400545130522, 0.030059620854277914, 0.03363117441881648, 0.03773420610941156, 0.04243484053557183, 0.047801305115427295, 0.05390287401071501, 0.06080863096856043, 0.06858605303368435, 0.07729942168094332, 0.08700807321328177, 0.09776450632853559, 0.10961237163034758, 0.1225843755941368, 0.13670014016648227, 0.15196406881263283, 0.16836328050843843, 0.18586568494936287, 0.20441828518012836, 0.22394580801478303, 0.24434977804129093, 0.26550816781679887, 0.2872757750555095, 0.30948549731240127, 0.33195069592532356, 0.3544688638516515, 0.37682683662637384, 0.39880781202910776, 0.4202004722508727, 0.4408105325068127, 0.4604750721853265, 0.47908003885926326, 0.4965813519081434, 0.5130300711660509, 1.0]

#  The next line selects table of interest
qx = qx_japan   # Here, we choose Japan's mortality data for males (2018)
qx = qx_smooth   # Smoothed Qx

qx_len = len(qx)

# For reproducability I set the random number generator to Kierans age
my_seed = 16081957
random.seed(my_seed)

# Number of silulation runs
runs = 1000000

# Variable to capture sim results
results = []

percent_reduce = 1.0    # % reduction in the rates of mortality

for simno in range(runs):
    age = 0
    
    while True:
        rnd = random.random()
        if ( (rnd < (percent_reduce * qx[age])) or (age > (qx_len - 1) ) ):
            results.append(age)
            age = age + 1
            break
        age = age + 1

# Plot histogram
# The number of bins to use in the histogram output
bins = qx_len
#n, bins, patches = plt.hist(results, bins, facecolor='blue', alpha=0.5)
#plt.show()

# Plot points from results ###############################################

# Convert results to a dictionary of age & frequency
dict = Counter(results)
# Sort dictionary
dict = OrderedDict(sorted(dict.items()))

# Create the X axis values - age
x = np.linspace(0, qx_len, qx_len)

y = np.array(list(dict.values())) / runs * 100

# Prepare plot in the background
plt.plot(x, y) 

# Label x axis 
plt.xlabel('Age') 
# Label y axis 
plt.ylabel('% Deaths') 
  
# Graph title 
plt.title('Mortality Simulation - Japanese Males (2018), ' + str(runs) + ' runs') 
  
# Display the plot 
plt.show() 

